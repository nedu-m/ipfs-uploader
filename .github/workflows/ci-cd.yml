name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  set-up-code-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.16.0]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Run Lint
        run: npm run lint

      - name: Run tests and capture output
        run: |
          npm test 2>&1 | tee test-output.log
        continue-on-error: false

      - name: Upload test output
        uses: actions/upload-artifact@v3
        with:
          name: test-output
          path: test-output.log

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage/

  build:
    runs-on: ubuntu-latest
    needs: set-up-code-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        run: docker build -t nedumrr/ipfs_uploader:latest -t 058264444282.dkr.ecr.eu-north-1.amazonaws.com/ipfs_uploader:latest .

      - name: Save Docker image to file
        run: docker save -o ipfs_uploader.tar nedumrr/ipfs_uploader:latest

      - name: Upload Docker image to artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: ipfs_uploader.tar

  push-to-aws-ecr:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download Docker image artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Load Docker image from file
        run: docker load -i ipfs_uploader.tar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Log in to Amazon ECR
        id: ecr-login
        run: aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin 058264444282.dkr.ecr.eu-north-1.amazonaws.com

      - name: Tag Docker image for ECR
        run: docker tag nedumrr/ipfs_uploader:latest 058264444282.dkr.ecr.eu-north-1.amazonaws.com/ipfs_uploader:latest

      - name: Push Docker image to ECR
        run: docker push 058264444282.dkr.ecr.eu-north-1.amazonaws.com/ipfs_uploader:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [push-to-aws-ecr]

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ipfs-uploader-cluster --service ipfs-uploader-service --force-new-deployment

  cleanup-ecr:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: List images and delete older ones
        run: |
          IMAGES=$(aws ecr describe-images --repository-name ipfs_uploader --region eu-north-1 --query 'imageDetails[*].{Digest: imageDigest, PushedAt: imagePushedAt}' --output json | jq -r '. | sort_by(.PushedAt) | .[].Digest')
          echo "Found images:" > cleanup_ecr.log
          echo "$IMAGES" >> cleanup_ecr.log
          NUM_IMAGES=$(echo "$IMAGES" | wc -l)
          echo "Number of images: $NUM_IMAGES" >> cleanup_ecr.log
          NUM_TO_DELETE=$((NUM_IMAGES - 3))
          if [ $NUM_TO_DELETE -gt 0 ]; then
            IMAGES_TO_DELETE=$(echo "$IMAGES" | head -n $NUM_TO_DELETE)
            echo "Images to delete:" >> cleanup_ecr.log
            echo "$IMAGES_TO_DELETE" >> cleanup_ecr.log
            for DIGEST in $IMAGES_TO_DELETE; do
              aws ecr batch-delete-image --repository-name ipfs_uploader --region eu-north-1 --image-ids imageDigest=$DIGEST
              echo "Deleted image with digest $DIGEST" >> cleanup_ecr.log
            done
          else
            echo "No images to delete" >> cleanup_ecr.log

      - name: Upload cleanup log
        uses: actions/upload-artifact@v3
        with:
          name: cleanup-ecr-log
          path: cleanup_ecr.log

      - name: Print cleanup log as summary
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const log = fs.readFileSync('cleanup_ecr.log', 'utf8');
            core.summary
              .addHeading('ECR Cleanup Log')
              .addCodeBlock(log)
              .write();